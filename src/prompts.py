"""Prompt templates"""

SYSTEM_PROMPT = """
## 基本情報
あなたはカスタマーサポート向けSaaSのカスタマーサポート担当です。
サービス名はカラクリCSデジタルシリーズです。
丁寧な対応を心掛けてください。

## ルール
- 回答する前に、FAQを参照してください
""".strip()


def prompt_builder_for_statement_extraction(sentences: list[str]) -> str:
    """Prompt builder for statement extraction"""
    sentences_str = ""
    for i, sent in enumerate(sentences):
        sentences_str += f"<text>{i}. {sent}</text>\n"
    sentences_str = sentences_str.strip()

    return f"""# 要件
テキストの列が与えられるので、それぞれのテキストに対して「主張」を抽出してほしいです。
出力は後述するJSON形式で行って下さい。

## 主張とは
「主張」とは、文中に含まれる「意味のある情報の単位」を指します。
1つの文に複数の情報が含まれている場合は、それぞれを別々の主張として抽出します。

### 箇条書きや手順の場合
- **箇条書きでテキストが並列に並んでいる場合**は、全体を1つの主張として抽出します。
- **手順形式で複数の工程が直列に並んでいる場合**は、それらをひとまとめにして1つの主張として抽出してください。

## 要件の補足
次に該当するテキストについては、**文意が継続している場合は結合**、継続しない場合は**無視**して下さい。
- 「以下に示す〜」「下記にまとめる〜」など後述する内容の枕詞の役割を担うテキスト: 単体で主張とみなすことを避けて下さい。
- 「〜について調べます」「〜について検索します」など後述する検索結果の枕詞: 情報を提示するものではないと見做して下さい。

次に該当するテキストは**無視**して下さい。
- **疑問文**: 情報を提示するものではないため、主張とは見做しません。
- 「〜についてお困りですね」「〜に関して承りました」など**問い合わせ内容の確認や復唱**と判断できるもの: 情報を提示するものではない（主張ではない）と見做して下さい。
- 「詳細は〜を参照」「詳しくは〜をご確認ください」など**参照先へのリンク**と判断できるもの: それ自体が情報を提示するものではない（主張ではない）と見做して下さい。

「これ」「それ」「これによって」「そのため」など、指示語を含む主張については、指示語の内容が明記された箇所と結合する、もしくは指示語の内容を引用して下さい。
引用方法としては、指示語の後に（）で括って、その中に引用した内容を記載して下さい。例）「これ（指示語の引用内容）について〜」

# 例（主張の抽出）

## 例1
- **入力テキスト**:
  「ジム通いは、健康面だけでなく、精神面にも良い影響を与える素晴らしい習慣だ。」

- **主張**
  1. ジム通いは健康面に良い影響を与える。
  2. ジム通いは精神面に良い影響を与える。
  3. ジム通いは素晴らしい習慣だ。

- **出力**:
  ["ジム通いは健康面に良い影響を与える。", "ジム通いは精神面に良い影響を与える。", "ジム通いは素晴らしい習慣だ。"]

- **コメント**:
  テキスト中に複数の主張が含まれる場合、それぞれの主張を抽出して下さい。

---

## 例2
- **入力テキスト**:
  保険料は毎月1万円ですが、走行距離に応じて変動します。

- **主張**
  1. 保険料は毎月1万円です。
  2. 保険料は走行距離に応じて変動します。

- **出力**:
  ["保険料は毎月1万円です。", "保険料は走行距離に応じて変動します。"]

- **コメント**:
  テキスト中に複数の主張が含まれる場合、それぞれの主張を抽出して下さい。

---

## 例3
- **入力テキスト**:
  Aについて下記にまとめる
  - 基本的にAはBである。
  - Cの場合、例外的にAはDである。
  - Eの場合、Aは80%Fと一致する。

- **主張**
  - 基本的にAはBである。Cの場合、例外的にAはDである。Eの場合、Aは80%Fと一致する。

- **出力**:
  ["基本的にAはBである。Cの場合、例外的にAはDである。Eの場合、Aは80%Fと一致する。"]

- **コメント**:
  - 箇条書きで複数の条件が含まれる場合、全体を1つの主張として抽出して下さい。
  - 「Aについて下記にまとめる」の部分は、本質的に情報を含まないため、主張として抽出しないで下さい。

---

## 例4
- **入力テキスト**:
  下記の手順によってログインできます。
  ログイン後には、商品の購入などが可能です。
  1. ログインページ（https://example.com/login）にアクセスする。
  2. ユーザ名とパスワードを入力する。

- **主張**
  1. ログイン後には、商品の購入などが可能である。
  2. ログインページ（https://example.com/login）にアクセスし、ユーザ名とパスワードを入力することでログインできる。

- **出力**:
  ["ログイン後には、商品の購入などが可能である。", "ログインページ（https://example.com/login）にアクセスし、ユーザ名とパスワードを入力することでログインできる。"]

- **コメント**:
  - 手順を示すテキストの場合、その手順全体を1つの主張として抽出して下さい。
  - URLやIDなど固有の情報は重要であるため、必ず主張として抽出して下さい。
  - 「下記の手順によってログインできます。」の部分は、本質的に情報を含まないため、主張として抽出しないで下さい。

---

## 例5
- **入力テキスト**:
  次の中から、確認事項を選択して下さい。
  - お問い合わせ先について
  - 商品の利用方法について

- **主張**
  - 「お問い合わせ先について」、「商品の利用方法について」から確認事項を選択して下さい。

- **出力**:
  ["「お問い合わせ先について」、「商品の利用方法について」から確認事項を選択して下さい。"]

- **コメント**:
  - 選択肢から選ぶような場合、選択肢全体を1つの主張として抽出して下さい。
    - 一部のみを抽出すると、正しく情報が伝わらない場合があります。

---

## 例6
- **入力テキスト**:
  詳しい情報を教えていただけますか？

  - 靴のサイズについて
  - 靴の色について
  - その他のご要望

- **主張**
  - なし

- **出力**:
  []

- **コメント**
  （特になし）

---

# 入力の例
<text>0. ~~~</text>
<text>1. ~~~</text>
<text>2. ~~~</text>
...

## 注意
- リストとして複数のテキストが与えられますが、該当するテキストの情報のみから主張を抽出して下さい。
- 箇条書きや手順形式の文について複数の作業手順や工程が列挙されている場合は、その内容をまとめて1つの主張として抽出して下さい。
  - それ以外の文はできるだけ細分化して抽出して下さい。

# 入力
{sentences_str}

# 出力フォーマット
- **JSON形式**
- 以下の Dict からなるリスト
    - それぞれの Dict は、テキストのインデックス（index）と主張のリスト（statements）からなる。
    - 補足: 主張がない場合は空リストとして下さい。

## 出力例
```json
[
    {{
        "index": "0", # テキストのインデックス
        "statements": ["主張A", "主張B"], # 主張のリスト
    }},
    {{
        "index": "1",
        "statements": ["主張C", "主張D", "主張E"]
    }},
    {{
        "index": "2",
        "statements": []
    }},
    ...
]
```

# 出力
""".strip()  # noqa: E501


def prompt_builder_for_statement_verification(
    statements: list[str], reference: str
) -> str:
    """Prompt builder for statement verification"""
    statements_str = ""
    for i, statement in enumerate(statements):
        statements_str += f"{i}. {statement}\n"
    statements_str = statements_str.strip()

    return f"""
主張のリストと参照文が与えられるので、それぞれの主張が参照文から**直接的に推論できる**かどうかを判定して下さい。
- **「直接的に推論できる」とは**、参照文の記載内容を単純な言い換えや明示的な言及で検証できるレベルを指します。
推測や解釈による飛躍が必要な場合は「直接的」とはみなしません。

主張が参照文から直接的に推論できる場合は「"1"」、できない場合は「"0"」として下さい。
出力は後述するJSON形式で行って下さい。

# 主張のリスト
{statements_str}

# 参照文
{reference}

# 出力
- **JSON形式**
- 以下の Dict からなるリスト
    - それぞれの Dict は、主張のインデックス（index）と主張の正誤判定の理由（reason）と正誤判定の結果（validity）からなる。
    - 主張の正誤判定について
        - 主張の記載内容を1つ1つ確認し、それらが参照文から直接的に推論できるかどうかを判定して下さい。
        - 必ず次のステップに従って判定して下さい。
            1. 主張から、正誤判定すべき情報を抽出する。
            2. 参照文を確認し、1に関する情報が参照文に記載されているかどうかを確認する。
                a. 参照文に関連情報の記載がある場合、再度、主張が参照文から直接的に推論できるかどうかを判定する。
                    - 関連情報の記載はあっても、参照情報から飛躍したような主張は正しくないと判定して下さい。
                b. 参照文に関連情報の記載がない場合、主張が参照文から直接的に推論できないと判定する。
        - 主張が参照文から直接的に推論できる場合は「1」、できない場合は「0」で正誤を評価して下さい。
            - 正誤判定の理由（思考課程）を参考に、最終的な評価を行って下さい。

## 出力例
```json
[
    {{
        "index": "0",
        "reason": "...",  # 主張が参照文から直接的に推論できるかどうかを判定するための理由
        "validity": "1"  # 主張が参照文から直接的に推論できる場合は「1」、できない場合は「0」
    }},
    {{
        "index": "1",
        "reason": "...",
        "validity": "0"
    }},
    ...
]
```

# 出力
""".strip()  # noqa: E501


def prompt_builder_for_common_sense_verification(statements: list[str]) -> str:
    """Prompt builder for common sense verification"""
    statements_str = ""
    for i, statement in enumerate(statements):
        statements_str += f"<statement>{i}. {statement}</statement>\n"
    statements_str = statements_str.strip()

    return f"""
主張のリストが与えられます。ぞれぞれの主張を、下記に示す基準に基づいて分類して下さい。
一言で要約すると、「一般常識に即しているかどうか」を判定してほしいです。
主張が一般常識に即している場合は「"1"」、そうでない場合は「"0"」として分類して下さい。
ただし、後述する通り、**判定の基準**は3つの要素から成ります。必ず指定された3ステップの手順（**判定の手順**）に沿って判定を行って下さい。

【一般常識の定義について補足】
ここで「一般常識」とは、特定の企業やサービスに依存しない、社会通念的に広く通用する情報や考え方を指します。
- 具体的な製品名やサービス名、料金設定、契約内容など、狭い範囲でのみ通用する情報は「一般常識に即していない」と判断して下さい。
- 一方、日常生活や社会の広い文脈で共通理解があるような事柄は「一般常識に即している」と判断して下さい。

# 判定の基準
## 主張が一般常識から直接的に推論できるか
例えば、以下は一般常識に即している主張の例です。
- 「慎重に考えることは大切だ」
- 「XXXについて詳しく知りたい場合は、その旨をお知らせください」
    - この場合、一般的な丁寧な対応を意味しているため、一般常識に即していると言えます。
一方で、以下は一般常識に即していない主張の例です。
- 「XYZ社のサービスの設定方法は...」
- 「ABCの製品の利用規約によると...」
- 「XXXについて詳しく知りたい場合は、問い合わせ窓口にご連絡下さい」
- 「当社の製品には3年間の保証が付いています」
特定のサービスや契約内容、特定の問い合わせ先、具体的な数字に関する情報は一般常識とは言えません。
主張が一般常識に即している場合は「"1"」、そうでない場合は「"0"」として分類して下さい。

## 主張が情報提供を行うものか
- 主張が情報を提供するものではない場合は、正しい即ち「"1"」として下さい（無情報なものは正しいと判断して下さい。）。
    - 目次や後に続く情報の要約も、情報提供を行うものではない（本質的には無情報）と判断して下さい。
        - 主張内ではなく、後で情報提供を行う旨が記載されている場合もこれに該当します。
    - 例
        - 「以下に示す手順で〇〇できます。」
        - 「次のリンクから〇〇できます。」
        - 「〇〇について述べます。」
        - 「〇〇について情報を示します。」
        - 「〇〇についてお調べいたしますので、少々お待ち下さい。」
        - 「〇〇についても後程案内いたします。」
        - 「〇〇について、お知らせいたします。」
- 確認・質問・依頼についても、主張が情報を提供するものではないと判断し「"1"」として下さい
    - 例
        - 「リンク先のページをご確認ください。」
        - 「他に質問はありませんか？」
        - 「こちらからAAをダウンロードしてみてください。」
        - 「〇〇についてお知らせください（教えてください）。」
        - 「〇〇のFAQサイトをご利用ください。」

## 例外：主張がお金に関するものであるか
商品やサービスの料金・給料といった「お金に関する情報」については、回答内容に責任を持てないため、例外的に「"0"」と分類して下さい。

# 判定の手順
必ず以下の順番で判定（0/1の分類）を行って下さい。
1. 主張がお金に関するものであるか
    - この段階で、「お金に関する情報」であると判断した場合は、主張を「"0"」と分類して下さい。
2. 主張が情報提供を行うものか
    - この段階で、主張が無情報であると判断した場合は、主張を「"1"」と分類して下さい。
3. 主張が一般常識から直接的に推論できるか
    - 必ず、最後にこちらの判定を行ってください。

# 入力の例
<statement>0. ~~~</statement>
<statement>1. ~~~</statement>
<statement>2. ~~~</statement>
...

# 主張のリスト
{statements_str}

# 出力
- **JSON形式**
- 以下の Dict からなるリスト
    - それぞれの Dict は、主張のインデックス（index）と主張の正誤判定の思考過程（reason）と正誤判定の結果（validity）からなる。
    - 主張の正誤判定について
        - 主張の記載内容を1つ1つ確認し、それらが一般常識に即しているかどうかを判定して下さい。
        - 必ず次のステップに従って判定して下さい。
            1. 主張から、正誤判定すべき情報を抽出する。
            2. 一般常識の定義に基づいて、1に関する情報が一般常識に即しているかどうかを確認する。
        - 前述した「判断の基準」を意識し、step-by-step で考えて思考過程を必ず"reason"に明記して下さい。
        - まずは、主張が例外に該当するかどうかを判断して下さい。
    - 各主張が一般常識に即している場合は「"1"」、そうでない場合は「"0"」で正誤を評価して下さい。

## 出力例
```json
[
    {{
        "index": "0",
        "reason": "...",
        "validity": "1"
    }},
    {{
        "index": "1",
        "reason": "...",
        "validity": "0"
    }},
    ...
]
```

# 出力
""".strip()  # noqa: E501


def prompt_builder_for_improvement_proposal(conversation_text: str) -> str:
    """Prompt builder for improvement proposal"""
    return f"""
# 概要
あなたは、カスタマーセンターの優秀なサポート担当者です。
あなたは、カスタマーサポートのチャットボットの応答を分析し、ユーザーの不満を特定することが求められています。
以下でユーザーとボットの一連の会話ログを提示するので、ユーザーの不満の原因を特定し、ボットの改善に関わる情報を抽出してください。
# チャットボットの仕組み
このチャットボットでは生成AIが使われており、ユーザーの入力に対し適切な聞き返しを行うことで質問内容を特定し、解決策やQ&Aコンテンツの提示、およびデータ連携・オペレーター連携を行う仕組みとなっています。
また、ユーザーはボットの回答に対してup(良い)・down(悪い)のフィードバックをつけることができます。
なお、提示される一連の会話ログには、downがつけられたボットの回答が含まれます。
特に、downがつけられた回答に不満の理由が詰まっていると思われるので、その内容を中心に分析してください。
また会話ログに複数の質問内容が含まれる可能性がありますが、downがついた内容と関連しない部分やdownがつけられたがその後解決しupがつけられた部分などは、不満を感じていないか不満が解消された可能性が高いので、考察に含める必要がありません。
# ボットの改善について
ボットは質問内容の特定したあと、QAコンテンツなど与えられたナレッジを検索して解決内容を提示します。
よって、質問内容の特定がうまく行かなかった場合や、ナレッジの中に質問内容を解決するものがない場合には、適切な回答が返せず不満が生じることになります。
会話ログ全体の内容からどちらのケースに該当するかを推定し、その内容をボットの改善に繋げたいです。
# 入力
以下が実際の会話ログです。フィードバックがつけられた回答には「ボット(vote: down)」のようにupかdownかが記載されています。
### 会話ログ ###
{conversation_text}
###########
# 出力内容
会話ログをもとに、以下の情報を抽出してください。
1. ユーザーの質問内容の要約: ユーザーの質問・相談内容について簡潔にまとめてください。
2. ボットの回答内容の要約: ボットの回答内容について簡潔にまとめてください。
3. ユーザーの不満の原因: downがつけられた回答の原因を考察することで、ユーザーがどのような点に不満を感じたかを分析してください。
4. ナレッジが不足していたかどうか：ユーザーの不満が、ボットのナレッジ不足によるものかどうかを分析してください。
5. ボットの理解力が足りなかったかどうか：ユーザーの不満が、ボットの質問内容理解の精度不足によるものかどうかを分析してください。
6. 改善提案: チャットボットの応対や機能改善に関して、4, 5の分析をもとに提案してください。
7. ナレッジ追加案： 4でナレッジ不足と判断した場合、どのようなナレッジを追加すればよいか提案してください。
# 出力形式
回答は以下のJSON形式で返してください：
{{
"question_summary": "ユーザーの質問内容の要約",
"answer_summary": "ボットの回答内容の要約",
"discontent": "ユーザーが不満に感じた点の分析",
"lack_of_knowledge": "ナレッジ不足の有無",
"lack_of_understanding": "ボットの理解力不足の有無",
"improvement": "ボットの改善提案",
"knowledge_addition": "ナレッジ追加案"
}}
必ずJSONのみを返してください。JSONの外に説明などを付け加えないでください。
lack_of_knowledgeとlack_of_understandingは、該当する場合は1を、該当しない場合は0を返してください。
それ以外については、要約や分析内容をそれぞれ200文字程度の文字列で返してください。
ただし, 4で0と判断した場合はナレッジ追加案は不要なので、空文字列を返してください。
""".strip()  # noqa: E501
